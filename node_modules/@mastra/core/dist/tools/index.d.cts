import { z } from 'zod';
import { m as ToolExecutionContext, T as ToolAction, M as Mastra } from '../base-zjGki2_Z.cjs';
export { C as CoreTool, V as VercelTool } from '../base-zjGki2_Z.cjs';
import 'ai';
import '../base-DboIg_Cd.cjs';
import '@opentelemetry/api';
import '../index-mKY1XrpK.cjs';
import 'stream';
import 'pino';
import '@opentelemetry/sdk-trace-base';
import 'sift';
import 'json-schema';
import '../types-CwTG2XyQ.cjs';
import '../deployer/index.cjs';
import '../bundler/index.cjs';
import '../vector/index.cjs';
import '../vector/filter/index.cjs';
import '../tts/index.cjs';
import '../voice/index.cjs';

declare class Tool<TSchemaIn extends z.ZodSchema | undefined = undefined, TSchemaOut extends z.ZodSchema | undefined = undefined, TContext extends ToolExecutionContext<TSchemaIn> = ToolExecutionContext<TSchemaIn>, TOptions extends unknown = unknown> implements ToolAction<TSchemaIn, TSchemaOut, TContext, TOptions> {
    id: string;
    description: string;
    inputSchema?: TSchemaIn;
    outputSchema?: TSchemaOut;
    execute?: (context: TContext, options?: TOptions) => Promise<TSchemaOut extends z.ZodSchema ? z.infer<TSchemaOut> : unknown>;
    mastra?: Mastra;
    constructor(opts: ToolAction<TSchemaIn, TSchemaOut, TContext>);
}
declare function createTool<TSchemaIn extends z.ZodSchema | undefined = undefined, TSchemaOut extends z.ZodSchema | undefined = undefined, TContext extends ToolExecutionContext<TSchemaIn> = ToolExecutionContext<TSchemaIn>>(opts: ToolAction<TSchemaIn, TSchemaOut, TContext>): Tool<TSchemaIn, TSchemaOut, TContext, unknown>;

export { Tool, ToolAction, ToolExecutionContext, createTool };
