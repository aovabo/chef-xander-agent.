import { M as MastraBase } from '../base-DboIg_Cd.cjs';
import '@opentelemetry/api';
import '../index-mKY1XrpK.cjs';
import 'stream';
import 'pino';
import '@opentelemetry/sdk-trace-base';

interface BuiltInModelConfig {
    name: string;
    apiKey?: string;
}
interface VoiceConfig {
    listeningModel?: BuiltInModelConfig;
    speechModel?: BuiltInModelConfig;
    speaker?: string;
}
declare abstract class MastraVoice extends MastraBase {
    protected listeningModel?: BuiltInModelConfig;
    protected speechModel?: BuiltInModelConfig;
    protected speaker?: string;
    constructor({ listeningModel, speechModel, speaker }?: VoiceConfig);
    traced<T extends Function>(method: T, methodName: string): T;
    /**
     * Convert text to speech
     * @param input Text or text stream to convert to speech
     * @param options Speech options including speaker and provider-specific options
     * @returns Audio stream
     */
    abstract speak(input: string | NodeJS.ReadableStream, options?: {
        speaker?: string;
        [key: string]: any;
    }): Promise<NodeJS.ReadableStream>;
    /**
     * Convert speech to text
     * @param audioStream Audio stream to transcribe
     * @param options Provider-specific transcription options
     * @returns Text or text stream
     */
    abstract listen(audioStream: NodeJS.ReadableStream, options?: {
        [key: string]: any;
    }): Promise<string | NodeJS.ReadableStream>;
    /**
     * Get available speakers/voices
     * @returns Array of available voice IDs and their metadata
     */
    abstract getSpeakers(): Promise<Array<{
        voiceId: string;
        [key: string]: any;
    }>>;
}

declare class CompositeVoice extends MastraVoice {
    protected speakProvider?: MastraVoice;
    protected listenProvider?: MastraVoice;
    constructor({ speakProvider, listenProvider }: {
        speakProvider?: MastraVoice;
        listenProvider?: MastraVoice;
    });
    speak(input: string | NodeJS.ReadableStream, options?: any): Promise<NodeJS.ReadableStream>;
    listen(audioStream: NodeJS.ReadableStream, options?: any): Promise<string | NodeJS.ReadableStream>;
    getSpeakers(): Promise<{
        [key: string]: any;
        voiceId: string;
    }[]>;
}

export { CompositeVoice, MastraVoice, type VoiceConfig };
