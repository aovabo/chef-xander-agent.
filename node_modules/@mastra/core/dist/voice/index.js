import { InstrumentClass } from '../chunk-W5HVJX45.js';
import { MastraBase } from '../chunk-4VHCCQ7P.js';
import { __decoratorStart, __decorateElement, __runInitializers } from '../chunk-C6A6W6XS.js';

// src/voice/voice.ts
var _MastraVoice_decorators, _init, _a;
_MastraVoice_decorators = [InstrumentClass({
  prefix: "voice",
  excludeMethods: ["__setTools", "__setLogger", "__setTelemetry", "#log"]
})];
var MastraVoice = class extends (_a = MastraBase) {
  listeningModel;
  speechModel;
  speaker;
  constructor({
    listeningModel,
    speechModel,
    speaker
  } = {}) {
    super({
      component: "VOICE"
    });
    this.listeningModel = listeningModel;
    this.speechModel = speechModel;
    this.speaker = speaker;
  }
  traced(method, methodName) {
    return this.telemetry?.traceMethod(method, {
      spanName: `voice.${methodName}`,
      attributes: {
        "voice.type": this.speechModel?.name || this.listeningModel?.name || "unknown"
      }
    }) ?? method;
  }
};
MastraVoice = /*@__PURE__*/(_ => {
  _init = __decoratorStart(_a);
  MastraVoice = __decorateElement(_init, 0, "MastraVoice", _MastraVoice_decorators, MastraVoice);
  __runInitializers(_init, 1, MastraVoice);

  // src/voice/composite-voice.ts
  return MastraVoice;
})();
// src/voice/composite-voice.ts
var CompositeVoice = class extends MastraVoice {
  speakProvider;
  listenProvider;
  constructor({
    speakProvider,
    listenProvider
  }) {
    super();
    this.speakProvider = speakProvider;
    this.listenProvider = listenProvider;
  }
  async speak(input, options) {
    if (!this.speakProvider) {
      throw new Error("No speak provider configured");
    }
    return this.speakProvider.speak(input, options);
  }
  async listen(audioStream, options) {
    if (!this.listenProvider) {
      throw new Error("No listen provider configured");
    }
    return this.listenProvider.listen(audioStream, options);
  }
  async getSpeakers() {
    if (!this.speakProvider) {
      throw new Error("No speak provider configured");
    }
    return this.speakProvider.getSpeakers();
  }
};

export { CompositeVoice, MastraVoice };
